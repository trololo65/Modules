# meta developer: @trololo_1

import subprocess
try:
	import emoji
except:
	mod_inst = subprocess.Popen("pip install emoji", shell=True) 
	mod_inst.wait()
	import emoji
from .. import loader, utils
import string, pickle, re
from telethon.tl.types import Channel 

conf_default = {
			'-s1':{ 											# –°–¢–ò–õ–ò –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è
				'1': [False, '<b>–∂–∏—Ä–Ω—ã–π</b>', '<b>', '</b>'], 
				'2': [False, '<i>–∫—É—Ä—Å–∏–≤</i>', '<i>', '</i>'], 
				'3': [False, '<u>–ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π</u>', '<u>', '</u>'],
				'4': [False, '<s>–∑–∞—á—ë—Ä–∫–Ω—É—Ç—ã–π</s>', '<s>', '</s>'],
				'5': [False, '<tg-spoiler>—Å–∫—Ä—ã—Ç—ã–π</tg-spoiler>', '<tg-spoiler>', '</tg-spoiler>'],
			},
			'-s2':{												# –°–¢–ò–õ–ò –¥–ª—è "–° —Ä–µ–ø–ª–∏–∫–æ–π"
				'1': [True, '<b>–∂–∏—Ä–Ω—ã–π</b>', '<b>', '</b>'], 
				'2': [False, '<i>–∫—É—Ä—Å–∏–≤</i>', '<i>', '</i>'], 
				'3': [False, '<u>–ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π</u>', '<u>', '</u>'],
				'4': [False, '<s>–∑–∞—á—ë—Ä–∫–Ω—É—Ç–æ</s>', '<s>', '</s>'],
				'5': [False, '<tg-spoiler>—Å–∫—Ä—ã—Ç—ã–π</tg-spoiler>', '<tg-spoiler>', '</tg-spoiler>'],
			}, 
			'-s3':{ 											# –°–¢–ò–õ–ò –¥–ª—è —Ä–µ–ø–ª–∏–∫–∏
				'1': [False, '<b>–∂–∏—Ä–Ω—ã–π</b>', '<b>', '</b>'], 
				'2': [False, '<i>–∫—É—Ä—Å–∏–≤</i>', '<i>', '</i>'], 
				'3': [False, '<u>–ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π</u>', '<u>', '</u>'],
				'4': [False, '<s>–∑–∞—á—ë—Ä–∫–Ω—É—Ç—ã–π</s>', '<s>', '</s>'],
				'5': [False, '<tg-spoiler>—Å–∫—Ä—ã—Ç—ã–π</tg-spoiler>', '<tg-spoiler>', '</tg-spoiler>'],
			},
			'-sE':{ 											# –≠–ú–û–î–ó–ò –ø–µ—Ä–µ–¥ —Ä–µ–ø–ª–∏–∫–æ–π
				'1': [True, 'üí¨'], 
				'2': [False, 'üí≠'], 
				'3': [False, 'üóØ'], 
				'4': [False, '‚úâÔ∏è'],
				'5': [False, 'üîä'],
				'6': [False, 'üè≥Ô∏è‚Äçüåà']
			}, 
			'-sS':{ 											# –†–ê–ó–†–´–í —Å—Ç—Ä–æ–∫–∏ –≤ —Ä–µ–ø–ª–∏–∫–µ
				'1': [True, '–ø—Ä–æ–±–µ–ª', ' '], 
				'2': [False, '—Ä–∞–∑—Ä—ã–≤ —Å—Ç—Ä–æ–∫–∏', '\n'],
				'3': [False, '—Ç–æ—á–∫–∞ + –ø—Ä–æ–±–µ–ª', '. '],
				'4': [False, '–∑–∞–ø—è—Ç–∞—è + –ø—Ä–æ–±–µ–ª', ', ']} 
			}
@loader.tds
class RPMod(loader.Module):
	"""–ú–æ–¥—É–ª—å RPMod."""
	strings = {'name': 'RPMod'}

	async def client_ready(self, client, db):
		self.db = db
		if not self.db.get("RPMod", "exlist", False):
			self.db.set("RPMod", "exlist", [])
		if not self.db.get("RPMod", "status", False):
			self.db.get("RPMod", "status", 1)
		if not self.db.get("RPMod", "rprezjim", False):
			self.db.set("RPMod", "rprezjim", 1)
		if not self.db.get('RPMod', 'rpnicks', False):
			self.db.set('RPMod', 'rpnicks', {})
		if not self.db.get('RPMod', 'rpcomands', False):
			comands = {'—á–º–æ–∫': '—á–º–æ–∫–Ω—É–ª', '–ª–∏–∑—å': '–ª–∏–∑–Ω—É–ª', '–∫—É—Å—å': '–∫—É—Å—å–Ω—É–ª', '–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å': '–ø–æ—Ü–µ–ª–æ–≤–∞–ª', '–≤—ã–µ–±–∞—Ç—å': '–≤—ã–µ–±–∞–ª', '—Ç—Ä–∞—Ö–Ω—É—Ç—å': '—Ç—Ä–∞—Ö–Ω—É–ª', '–≤—ã–ø–æ—Ä–æ—Ç—å': '–≤—ã–ø–æ—Ä–æ–ª', '—à–ª–µ–ø–Ω—É—Ç—å': '—à–ª–µ–ø–Ω—É–ª', '–æ—Ç–ª–∏–∑–∞—Ç—å': '–æ—Ç–ª–∏–∑–∞–ª —É', '–ø—Ä–∏–∂–∞—Ç—å': '–ø—Ä–∏–∂–∞–ª', '–ø–æ–≥–ª–∞–¥–∏—Ç—å': '–ø–æ–≥–ª–∞–¥–∏–ª', '–¥–∞.': '–ø–∏–∑–¥–∞', '–≥–¥–µ.': '–≤ –ø–∏–∑–¥–µ', '–Ω–µ—Ç.': '–ø–∏–¥–æ—Ä–∞ –æ—Ç–≤–µ—Ç', '–±—ã–≤–∞–µ—Ç.': '–Ω—É —ç—Ç–æ –ø–∏–∑–¥–µ—Ü –∫–æ–Ω–µ—á–Ω–æ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ', '–æ–±–Ω—è—Ç—å': '–æ–±–Ω—è–ª'}
			self.db.set('RPMod', 'rpcomands', comands)
		if not self.db.get('RPMod', 'rpemoji', False):
			self.db.set('RPMod', 'rpemoji', {'–ª–∏–∑—å': 'üëÖ'})
		if not self.db.get('RPMod', 'useraccept', False):
			self.db.set('RPMod', 'useraccept', {"chats": [], "users": []})
		elif type(self.db.get('RPMod', 'useraccept')) == type([]):
			self.db.set('RPMod', 'useraccept', {"chats": [], "users": self.db.get('RPMod', 'useraccept')})
		if self.db.get("RPMod", "rpconfigurate", False):			# –î–õ–Ø —Ä–∞–∑–Ω—ã—Ö –≤–µ—Ä—Å–∏–π –º–æ–¥—É–ª—è.
			self.db.set("RPMod", "rpconfigurate", self.merge_dict(conf_default, self.db.get("RPMod", "rpconfigurate")))

	async def dobrpcmd(self, message):
		"""–ò—Å–ø–æ–ª—å–∑—É–π: .dobrp (–∫–æ–º–∞–Ω–¥–∞) / (–¥–µ–π—Å—Ç–≤–∏–µ) / (—ç–º–æ–¥–∑–∏) —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É. –ú–æ–∂–Ω–æ –∏ –±–µ–∑ —ç–º–æ–¥–∑–∏."""
		args = utils.get_args_raw(message)
		dict_rp = self.db.get('RPMod', 'rpcomands')
		
		try:
			key_rp = str(args.split('/')[0]).strip()
			value_rp = str(args.split('/', maxsplit=2)[1]).strip()
			lenght_args = args.split('/')
			count_emoji = 0
			
			if len(lenght_args) >= 3:
				emoji_rp = str(args.split('/', maxsplit=2)[2]).strip()
				dict_emoji_rp = self.db.get('RPMod', 'rpemoji')
				
				r = emoji_rp
				lst = []
				count_emoji = 1
				for x in r:
					if x in emoji.UNICODE_EMOJI['en'].keys(): lst.append(x)
					if x.isalpha() or x.isspace() or x.isdigit() or x in string.punctuation:
						await utils.answer(message, f"<b>–ë—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ —Ç–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏(–ø—Ä–æ–±–µ–ª —Ç–æ–∂–µ —Å–∏–º–≤–æ–ª). </b>")
						return
				if len(lst) > 3:
					await utils.answer(message, f"<b>–ë—ã–ª–æ –≤–≤–µ–¥–µ–Ω–æ –±–æ–ª–µ–µ 3 —ç–º–æ–¥–∑–∏.</b>")
					return
				elif not emoji_rp or not emoji_rp.strip():
					await utils.answer(message, f"<b>–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è —ç–º–æ–¥–∑–∏ –µ—Å—Ç—å, –∞ –∏—Ö –Ω–µ—Ç? —Ö–º.</b>")
					return
				
		
			key_len = [len(x) for x in key_rp.split()]
		
			if len(dict_rp) >= 70:
				await utils.answer(message, '<b>–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ä–ø –∫–æ–º–∞–Ω–¥.</b>')
			elif not key_rp or not key_rp.strip():
				await utils.answer(message, '<b>–í—ã –Ω–µ –≤–≤–µ–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–ø –∫–æ–º–∞–Ω–¥—ã.</b>')
			elif not value_rp or not value_rp.strip():
				await utils.answer(message, '<b>–í—ã –Ω–µ –≤–≤–µ–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ä–ø –∫–æ–º–∞–Ω–¥—ã.</b>')
			elif int(len(key_len)) > 1:
				await utils.answer(message, '<b>–í –∫–∞—á–µ—Å—Ç–≤–µ —Ä–ø –∫–æ–º–∞–Ω–¥—ã –±—ã–ª–æ –≤–≤–µ–¥–µ–Ω–æ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞.</b>')
			elif key_rp == 'all':
				await utils.answer(message, '<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å \'<code>all</code>\' –≤ –∫–∞—á–µ—Å—Ç–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø—Ä–µ—â–µ–Ω–æ!</b>')
			elif count_emoji == 1:
				dict_emoji_rp[key_rp] = emoji_rp
				dict_rp[key_rp]= value_rp
				self.db.set('RPMod', 'rpcomands', dict_rp)
				self.db.set('RPMod', 'rpemoji', dict_emoji_rp)
				await utils.answer(message, f'<b>–ö–æ–º–∞–Ω–¥–∞ \'<code>{key_rp}</code>\' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å —ç–º–æ–¥–∑–∏ \'{emoji_rp}\'!</b>')
			else:
				 dict_rp[key_rp]= value_rp
				 self.db.set('RPMod', 'rpcomands', dict_rp)
				 await utils.answer(message, f'<b>–ö–æ–º–∞–Ω–¥–∞ \'<code>{key_rp}</code>\' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>')
		except:
			await utils.answer(message, '<b>–í—ã –Ω–µ –≤–≤–µ–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å /, –ª–∏–±–æ –≤–æ–≤—Å–µ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–≤–µ–ª–∏.</b>')

	async def delrpcmd(self, message):
		"""–ò—Å–ø–æ–ª—å–∑—É–π: .delrp (–∫–æ–º–∞–Ω–¥–∞) —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É.\n –ò—Å–ø–æ–ª—å–∑—É–π: .delrp all —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã."""
		args = utils.get_args_raw(message)
		dict_rp = self.db.get('RPMod', 'rpcomands')
		dict_emoji_rp = self.db.get('RPMod', 'rpemoji')
		key_rp = str(args)
		count = 0
		if key_rp == 'all':
			dict_rp.clear()
			dict_emoji_rp.clear()
			self.db.set('RPMod', 'rpcomands', dict_rp)
			self.db.set('RPMod', 'rpemoji', dict_emoji_rp)
			await utils.answer(message, '<b>–°–ø–∏—Å–æ–∫ —Ä–ø –∫–æ–º–∞–Ω–¥ –æ—á–∏—â–µ–Ω.</b>')
			return
		elif not key_rp or not key_rp.strip():
			await utils.answer(message, '<b>–í—ã –Ω–µ –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É.</b>')
		else:
			try:
				if key_rp in dict_emoji_rp:
					dict_rp.pop(key_rp)
					dict_emoji_rp.pop(key_rp)
					self.db.set('RPMod', 'rpcomands', dict_rp)
					self.db.set('RPMod', 'rpemoji', dict_emoji_rp)
				else:
					dict_rp.pop(key_rp)
					self.db.set('RPMod', 'rpcomands', dict_rp)
				await utils.answer(message, f'<b>–ö–æ–º–∞–Ω–¥–∞ \'<code>{key_rp}</code>\' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!</b>')
			except KeyError:
				await utils.answer(message, '<b>–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.</b>')

	async def rpmodcmd(self, message):
		"""–ò—Å–ø–æ–ª—å–∑—É–π: .rpmod —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å RP —Ä–µ–∂–∏–º.\n–ò—Å–ø–æ–ª—å–∑—É–π: .rpmod toggle —á—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–º—Å."""
		status = self.db.get("RPMod", "status")
		rezjim = self.db.get("RPMod", "rprezjim")
		args = utils.get_args_raw(message)
		if not args:
			if status == 1:
				self.db.set("RPMod", "status", 2)
				await utils.answer(message, "<b>RP –†–µ–∂–∏–º <code>–≤—ã–∫–ª—é—á–µ–Ω</code></b>")
			else:
				self.db.set("RPMod", "status", 1)
				await utils.answer(message, "<b>RP –†–µ–∂–∏–º <code>–≤–∫–ª—é—á–µ–Ω</code></b>")
		elif args.strip() == 'toggle':
			if rezjim == 1:
				self.db.set("RPMod", "rprezjim", 2)
				await utils.answer(message, "<b>RP –†–µ–∂–∏–º –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ <code>–æ—Ç–ø—Ä–∞–≤–∫—É —Å–º—Å.</code></b>")
			else:
				self.db.set("RPMod", "rprezjim", 1)
				await utils.answer(message, "<b>RP –†–µ–∂–∏–º –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ <code>–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–º—Å.</code></b>")
		else:  	
			await utils.answer(message, '–ß—Ç–æ —Ç–æ –Ω–µ —Ç–∞–∫.. ')

	async def rplistcmd(self, message):
		"""–ò—Å–ø–æ–ª—å–∑—É–π: .rplist —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–ø –∫–æ–º–∞–Ω–¥."""
		com = self.db.get('RPMod', 'rpcomands')
		emojies = self.db.get('RPMod', 'rpemoji')
		l = len(com)
		
		listComands = f'–£ –≤–∞—Å —Ä–ø –∫–æ–º–∞–Ω–¥: <b>{l}</b> –∏–∑ <b>70</b>. '
		if len(com) == 0:
			await utils.answer(message, '<b>–£–≤—ã, —É –≤–∞—Å –Ω–µ—Ç—É —Ä–ø –∫–æ–º–∞–Ω–¥. :(</b>')
			return
		for i in com:
			if i in emojies.keys():
				listComands+=f'\n‚Ä¢ <b><code>{i}</code> - {com[i]} |</b> {emojies[i]}'
			else:
				listComands+=f'\n‚Ä¢ <b><code>{i}</code> - {com[i]}</b>'
		await utils.answer(message, listComands)

	async def rpnickcmd(self, message):
		"""–ò—Å–ø–æ–ª—å–∑—É–π: .rpnick (–Ω–∏–∫) —á—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ —Å–µ–±–µ. –° –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º -l –≤—ã–∑–æ–≤–µ—Ç –≤—Å–µ –Ω–∏–∫–∏."""
		args = utils.get_args_raw(message).strip()
		reply = await message.get_reply_message()
		nicks = self.db.get('RPMod', 'rpnicks')
		if args == '-l':
			str_nicks = '‚Ä¢ ' + '\n ‚Ä¢'.join(' --- '.join([f'<code>{user_id}</code>', f'<b>{nick}</b>']) for user_id, nick in nicks.items())
			return await utils.answer(message, str_nicks)

		if not reply:
			user = await message.client.get_entity(message.sender_id)
		else:
			user = await message.client.get_entity(reply.sender_id)
		if not args:
			if str(user.id) in nicks: nicks.pop(str(user.id))
			self.db.set('RPMod', 'rpnicks', nicks)
			return await utils.answer(message, f"–ù–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{str(user.id)}</b> –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ '<b>{user.first_name}</b>'")
		lst = []
		nick = ''
		for x in args:
			if x in emoji.UNICODE_EMOJI['en'].keys(): lst.append(x)
			if x not in emoji.UNICODE_EMOJI['en'].keys(): nick+=x
		if len(lst) > 3:
			await utils.answer(message, f"–ù–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{str(user.id)}</b> –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ '<b>{args}</b>'")
		elif len(lst) + len(nick) >= 45:
			await utils.answer(message, f"<b>–ù–∏–∫ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç –≤ 45 —Å–∏–º–≤–æ–ª–æ–≤(–≤–æ–∑–º–æ–∂–Ω–æ —ç–º–æ–¥–∑–∏ –∏–º–µ—é—Ç –¥–ª–∏–Ω—É –±–æ–ª–µ–µ 1 —Å–∏–º–≤–æ–ª–∞).</b>")
		else:
			nicks[str(user.id)] = args
			self.db.set('RPMod', 'rpnicks', nicks)
			await utils.answer(message, f"–ù–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{str(user.id)}</b> –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ '<b>{args}</b>'")

	async def rpbackcmd(self, message):
		"""–ë–µ–∫–∞–ø —Ä–ø –∫–æ–º–∞–Ω–¥.\n .rpback –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. """
		args = utils.get_args_raw(message).strip()
		comands = self.db.get('RPMod', 'rpcomands')
		emojies = self.db.get('RPMod', 'rpemoji')
		file_name = 'RPModBackUp.pickle'
		id = message.to_id
		reply = await message.get_reply_message()
		if not args:
			await utils.answer(message, '<b>–ê—Ä–≥—É–º–µ–Ω—Ç—ã:</b>\n<code>-b</code> <b>-- —Å–¥–µ–ª–∞—Ç—å –±–µ–∫–∞–ø.</b>\n<code>-r</code> <b>–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–µ–∫–∞–ø.(–∏—Å–ø–æ–ª—å–∑—É–π —Å —Ä–µ–ø–ª–∞–µ–º –Ω–∞ —Ñ–∞–π–ª)</b>')
		if args == '-b':
			try:
				await message.delete()
				dict_all = { 'rp': comands, 'emj': emojies}
				with open(file_name, 'wb') as f:
					pickle.dump(dict_all, f)
				await message.client.send_file(id, file_name)
			except Exception as e:
				await utils.answer(message, f"<b>–û—à–∏–±–∫–∞:\n</b>{e}")
		elif args == '-r' and reply:
			try:
				if not reply.document:
					await utils.answer(message, f"<b>–≠—Ç–æ –Ω–µ —Ñ–∞–π–ª.</b>")
				await reply.download_media(file_name)
				with open(file_name, 'rb') as f:
					data = pickle.load(f)
				rp = data['rp']
				emj = data['emj']
				result_rp = dict(comands, **rp)
				result_emj = dict(emojies, **emj)
				self.db.set('RPMod', 'rpcomands', result_rp)
				self.db.set('RPMod', 'rpemoji', result_emj)
				await utils.answer(message, f"<b>–ö–æ–º–∞–Ω–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>")
			except Exception as e:
				await utils.answer(message, f"<b>–û—à–∏–±–∫–∞:\n</b>{e}")
			
	async def rpblockcmd(self, message):
		"""–ò—Å–ø–æ–ª—å–∑—É–π: .rpblock —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ(–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –Ω—É–∂–Ω–æ–º —á–∞—Ç–µ).\n–ò—Å–ø–æ–ª—å–∑—É–π: .rpblock list —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á–∞—Ç—ã –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è—Ö.\n–ò—Å–ø–æ–ª—å–∑—É–π .rpblock (–∏–¥) —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —á–∞—Ç –∏–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π."""
		args = utils.get_args_raw(message)
		ex = self.db.get("RPMod", "exlist")
		if not args:
			a = await message.client.get_entity(message.to_id)
			if a.id in ex:
				ex.remove(a.id)
				self.db.set("RPMod", "exlist", ex)
				try:
					name = a.title
				except:
					name = a.first_name
				await utils.answer(message, f'<i>–ß–∞—Ç <b><u>{name}</u></b>[<code>{a.id}</code>] —É–¥–∞–ª–µ–Ω –∏–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π.</i>')
			else:
				ex.append(a.id)
				self.db.set("RPMod", "exlist", ex)
				try:
					name = a.title
				except:
					name = a.first_name
				await utils.answer(message, f'<i>–ß–∞—Ç <b><u>{name}</u></b>[<code>{a.id}</code>] –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è.</i>')
		elif args.isdigit():
			args = int(args)
			if args in ex:
				ex.remove(args)
				self.db.set("RPMod", "exlist", ex)
				a = await message.client.get_entity(args)
				try:
					name = a.title
				except:
					name = a.first_name
				await utils.answer(message, f'<i>–ß–∞—Ç <b><u>{name}</u></b>(<code>{args}</code>) —É–¥–∞–ª–µ–Ω –∏–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π.</i>')
			else:
				try:
					a = await message.client.get_entity(args)
				except:
					await utils.answer(message, '<b>–ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥.</b>')
				ex.append(args)
				self.db.set("RPMod", "exlist", ex)
				try:
					name = a.title
				except:
					name = a.first_name
				await utils.answer(message, f'<i>–ß–∞—Ç <b><u>{name}</u></b>[<code>{a.id}</code>] –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è.</i>')
		elif args == 'list':
			ex_len = len(ex)
			if ex_len == 0:
				await utils.answer(message, f'<b>–°–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –ø—É—Å—Ç.</b>')
				return
			sms = f'<i> –ß–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è—Ö({ex_len}):</i>'
			for i in ex:
				try:
					a = await message.client.get_entity(i)
				except:
					await utils.answer(message, f'<b>–ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥ -- {a}</b>')
					return
				try:
					name = a.title
				except:
					name = a.first_name
				sms+=f'\n‚Ä¢ <b><u>{name}</u> --- </b><code>{i}</code>'
			await utils.answer(message, sms)
		else:
			await utils.answer(message, '–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫..')

	async def useracceptcmd(self, message):
		""" –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π/—á–∞—Ç–æ–≤, —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞—à–∏ –∫–æ–º–∞–Ω–¥—ã.\n .useraccept {id/reply}/n–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π –±–µ–∑ —Ä–µ–ø–ª–∞—è –∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤."""
		reply = await message.get_reply_message()
		args = utils.get_args_raw(message)
		userA = self.db.get('RPMod', 'useraccept')
		if not reply and not args and message.is_group:
			chat = message.chat
			if chat.id not in userA["chats"]:
				userA["chats"].append(chat.id)
				return await utils.answer(message, f'<i>–ß–∞—Ç—É <b><u>{chat.title}</u></b>[<code>{chat.id}</code>] –æ—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø.</i>')
			else:
				userA["chats"].remove(chat.id)
				return await utils.answer(message, f'<i>–ß–∞—Ç—É <b><u>{chat.title}</u></b>[<code>{chat.id}</code>] –∑–∞–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø.</i>')
		elif args == '-l':
			sms = '<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–∞–Ω–¥–∞–º:</b>'
			for k, v in userA.items():
				if k == 'chats':
					sms+= f'\n<b>–ß–∞—Ç–æ–≤:</b>'
				else:
					sms+= f'\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>'
				for i in v: 
					try:
						user = (await message.client.get_entity(int(i))).title if k == 'chats' else (await message.client.get_entity(int(i))).first_name
						sms+= f'\n<b>‚Ä¢ <u>{user}</u> ---</b> <code>{i}</code>'
					except:
						sms+= f'\n<b>‚Ä¢</b> <code>{i}</code>'
			await utils.answer(message, sms)
		elif args or reply:
			args = int(args) if args.isdigit() else reply.sender_id
			if args in userA["users"]:
				userA["users"].remove(args)
				self.db.set('RPMod', 'useraccept', userA)
				await utils.answer(message, f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{args}</code> –±—ã–ª –∑–∞–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø.</b>')
			elif args in userA["chats"]:
				userA["chats"].remove(args)
				self.db.set('RPMod', 'useraccept', userA)
				await utils.answer(message, f'<b>–ß–∞—Ç—É <code>{args}</code> –±—ã–ª –∑–∞–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø.</b>')
			elif args not in userA["chats"] and type(await message.client.get_entity(args)) == Channel: 
				userA["chats"].append(args)
				self.db.set('RPMod', 'useraccept', userA)
				await utils.answer(message, f'<b>–ß–∞—Ç—É <code>{args}</code> –±—ã–ª –æ—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø.</b>')
			else:
				userA["users"].append(args)
				self.db.set('RPMod', 'useraccept', userA)
				await utils.answer(message, f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{args}</code> –±—ã–ª –æ—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø.</b>')
		else:
			await utils.answer(message, '–ß—Ç–æ —Ç–æ –Ω–µ —Ç–∞–∫..')

	async def rpconfcmd(self, message):
		"""–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è —Ä–ø"""
		conf = self.db.get("RPMod", "rpconfigurate", conf_default)
		args = utils.get_args_raw(message)
		if not args:
			sms = '‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã:</b>\n'
			s1 = '\n'.join([' | '.join([key, value[1], '‚úÖ' if value[0] else '‚ùå']) for key, value in conf['-s1'].items()])
			s2 = '\n'.join([' | '.join([key, value[1], '‚úÖ' if value[0] else '‚ùå']) for key, value in conf['-s2'].items()])
			s3 = '\n'.join([' | '.join([key, value[1], '‚úÖ' if value[0] else '‚ùå']) for key, value in conf['-s3'].items()])
			sE = '\n'.join([' | '.join([key, value[1], '‚úÖ' if value[0] else '‚ùå']) for key, value in conf['-sE'].items()])
			sS = '\n'.join([' | '.join([key, value[1], '‚úÖ' if value[0] else '‚ùå']) for key, value in conf['-sS'].items()])
			msg_text = f'‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã:</b>\n-s1 --- –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Å—Ç–∏–ª—å –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è:\n{s1}\n-s2 --- –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è s1, –Ω–æ –¥–µ–π—Å—Ç–≤—É–µ—Ç –Ω–∞ —Ç–µ–∫—Å—Ç "–° —Ä–µ–ø–ª–∏–∫–æ–π":\n{s2}\n-s3 --- –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è s2, –Ω–æ –¥–µ–π—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–∞–º—É —Ä–µ–ø–ª–∏–∫—É:\n{s3}\n-sE --- –≤—ã–±–æ—Ä —ç–º–æ–¥–∑–∏ –ø–µ—Ä–µ–¥ —Ä–µ–ø–ª–∏–∫–æ–π:\n{sE}\n-sS --- –≤—ã–±–æ—Ä —Å–∏–º–≤–æ–ª–∞ –¥–ª—è —Ä–∞–∑—Ä—ã–≤–∞ —Å—Ç—Ä–æ–∫ –≤ —Ä–µ–ø–ª–∏–∫–µ:\n{sS}\n\n–ü—Ä–∏–º–µ—Ä:\n<code>.rpconf -s1 2</code>'
			return await utils.answer(message, msg_text)
		args = args.split(' ')
		if len(args) <= 1:
			return await utils.answer(message, '–ë—ã–ª–æ –≤–≤–µ–¥–µ–Ω–æ –º–µ–Ω—å—à–µ –¥–≤—É—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.')
		try:
			if args[0] == '-s1' or args[0] == '-s2' or  args[0] == '-s3':
				if conf[args[0]][args[1]][0]:
					conf[args[0]][args[1]][0] = False
				else:
					conf[args[0]][args[1]][0] = True
			elif args[0] == '-sE' or args[0] == '-sS':
				for i in conf[args[0]].keys():
					conf[args[0]][i][0] = False
				conf[args[0]][args[1]][0] = True
			else:
				return await utils.answer(message, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç.')
		except:
			return await utils.answer(message, '–ù–µ–≤–µ—Ä–Ω–∞—è —Ü–∏—Ñ—Ä–∞.')
		self.db.set("RPMod", "rpconfigurate", conf)
		await utils.answer(message, f'–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞.')

	async def watcher(self, message):
		try:
			status = self.db.get("RPMod", "status")
			comand = self.db.get('RPMod', 'rpcomands')
			rezjim = self.db.get('RPMod', 'rprezjim')
			emojies = self.db.get('RPMod', 'rpemoji')
			ex = self.db.get("RPMod", "exlist")
			nicks = self.db.get('RPMod', 'rpnicks')
			users_accept = self.db.get('RPMod', 'useraccept')
			conf = self.db.get("RPMod", "rpconfigurate", conf_default)
			
			chat_rp = await message.client.get_entity(message.to_id)
			if status != 1 or chat_rp.id in ex: return
			me_id = (await message.client.get_me()).id

			if message.sender_id not in users_accept["users"] and message.sender_id != me_id and chat_rp.id not in users_accept["chats"]: return
			me = (await message.client.get_entity(message.sender_id))
			
			if str(me.id) in nicks.keys():
				nick = nicks[str(me.id)]
			else:
				nick = me.first_name
			args = message.text.lower()
			
			
			lines = args.splitlines()
			tags = lines[0].split(' ')
			if not tags[-1].startswith('@'):
				reply = await message.get_reply_message()
				user = await message.client.get_entity(reply.sender_id)
			else:
				if not tags[-1][1:].isdigit():
					user = await message.client.get_entity(tags[-1])
				else:
					user = await message.client.get_entity(int(tags[-1][1:]))
				lines[0] = lines[0].rsplit(' ', 1)[0]
			detail = lines[0].split(' ',maxsplit=1)
			if len(detail) < 2:
				detail.append(' ')
			if detail[0] not in comand.keys(): return
			detail[1] = ' ' + detail[1] 
			user.first_name = nicks[str(user.id)] if str(user.id) in nicks else user.first_name
			sE = ''.join([''.join([ value[1] if value[0] else '']) for key, value in conf['-sE'].items()])
			s1 = [''.join([ value[2] if value[0] else '' for value in conf['-s1'].values()]), ''.join([ value[3] if value[0] else '' for value in dict(reversed(list(conf['-s1'].items()))).values()])]
			s2 = [''.join([ value[2] if value[0] else '' for key, value in conf['-s2'].items()]), ''.join([ value[3] if value[0] else '' for value in dict(reversed(list(conf['-s2'].items()))).values()])]
			s3 = [''.join([ value[2] if value[0] else '' for key, value in conf['-s3'].items()]), ''.join([ value[3] if value[0] else '' for value in dict(reversed(list(conf['-s3'].items()))).values()])]
			sS = ''.join([''.join([ value[2] if value[0] else '']) for key, value in conf['-sS'].items()])
	
			rpMessageSend = ''
			if detail[0] in emojies.keys(): rpMessageSend += emojies[detail[0]] + ' | '
			rpMessageSend += f"<a href=tg://user?id={me.id}>{nick}</a> {s1[0]}{comand[detail[0]]}{s1[1]} <a href=tg://user?id={user.id}>{user.first_name}</a>{detail[1]}"
			if len(lines) >= 2: rpMessageSend += "\n{0} {1[0]}–° —Ä–µ–ø–ª–∏–∫–æ–π:{1[1]} {2[0]}{3}{2[1]}".format(sE, s2, s3, sS.join(lines[1:]))
			if rezjim == 1:
				return await utils.answer(message, rpMessageSend)
			else:
				return await message.respond(rpMessageSend)

		except:  pass

	def merge_dict(self, d1, d2):
		d_all = {**d1, **d2}
		for key in d_all:
			d_all[key] = {**d1[key], **d_all[key]}
		return d_all
