# by: @trololo_1
import subprocess
try:
	import emoji
except:
	mod_inst = subprocess.Popen("pip install emoji", shell=True) 
	mod_inst.wait()
	import emoji
from .. import loader, utils
import string, pickle

@loader.tds
class RPMod(loader.Module):
	"""–ú–æ–¥—É–ª—å RPMod."""
	strings = {'name': 'RPMod'}

	async def client_ready(self, client, db):
		self.db = db
		if not self.db.get("RPMod", "exlist", False):
			self.db.set("RPMod", "exlist", [])
		if not self.db.get("RPMod", "status", False):
			self.db.get("RPMod", "status", 1)
		if not self.db.get("RPMod", "rprezjim", False):
			self.db.set("RPMod", "rprezjim", 1)
		if not self.db.get('RPMod', 'rpnicks', False):
			self.db.set('RPMod', 'rpnicks', {})
		if not self.db.get('RPMod', 'rpcomands', False):
			comands = {'—á–º–æ–∫': '—á–º–æ–∫–Ω—É–ª', '–ª–∏–∑—å': '–ª–∏–∑–Ω—É–ª', '–∫—É—Å—å': '–∫—É—Å—å–Ω—É–ª', '–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å': '–ø–æ—Ü–µ–ª–æ–≤–∞–ª', '–≤—ã–µ–±–∞—Ç—å': '–≤—ã–µ–±–∞–ª', '—Ç—Ä–∞—Ö–Ω—É—Ç—å': '—Ç—Ä–∞—Ö–Ω—É–ª', '–≤—ã–ø–æ—Ä–æ—Ç—å': '–≤—ã–ø–æ—Ä–æ–ª', '—à–ª–µ–ø–Ω—É—Ç—å': '—à–ª–µ–ø–Ω—É–ª', '–æ—Ç–ª–∏–∑–∞—Ç—å': '–æ—Ç–ª–∏–∑–∞–ª —É', '–ø—Ä–∏–∂–∞—Ç—å': '–ø—Ä–∏–∂–∞–ª', '–ø–æ–≥–ª–∞–¥–∏—Ç—å': '–ø–æ–≥–ª–∞–¥–∏–ª', '–¥–∞.': '–ø–∏–∑–¥–∞', '–≥–¥–µ.': '–≤ –ø–∏–∑–¥–µ', '–Ω–µ—Ç.': '–ø–∏–¥–æ—Ä–∞ –æ—Ç–≤–µ—Ç', '–±—ã–≤–∞–µ—Ç.': '–Ω—É —ç—Ç–æ –ø–∏–∑–¥–µ—Ü –∫–æ–Ω–µ—á–Ω–æ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ', '–æ–±–Ω—è—Ç—å': '–æ–±–Ω—è–ª'}
			self.db.set('RPMod', 'rpcomands', comands)
		if not self.db.get('RPMod', 'rpemoji', False):
			self.db.set('RPMod', 'rpemoji', {'–ª–∏–∑—å': 'üëÖ'})
		if not self.db.get('RPMod', 'useraccept', False):
			self.db.set('RPMod', 'useraccept', [])

	async def dobrpcmd(self, message):
		"""–ò—Å–ø–æ–ª—å–∑—É–π: .dobrp (–∫–æ–º–∞–Ω–¥–∞) / (–¥–µ–π—Å—Ç–≤–∏–µ) / (—ç–º–æ–¥–∑–∏) —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É. –ú–æ–∂–Ω–æ –∏ –±–µ–∑ —ç–º–æ–¥–∑–∏."""
		args = utils.get_args_raw(message)
		dict_rp = self.db.get('RPMod', 'rpcomands')
		
		try:
			key_rp = str(args.split('/')[0]).strip()
			value_rp = str(args.split('/', maxsplit=2)[1]).strip()
			lenght_args = args.split('/')
			count_emoji = 0
			
			if len(lenght_args) >= 3:
				emoji_rp = str(args.split('/', maxsplit=2)[2]).strip()
				dict_emoji_rp = self.db.get('RPMod', 'rpemoji')
				
				r = emoji_rp
				lst = []
				count_emoji = 1
				for x in r:
					if x in emoji.UNICODE_EMOJI['en'].keys(): lst.append(x)
					if x.isalpha() or x.isspace() or x.isdigit() or x in string.punctuation:
						await utils.answer(message, f"<b>–ë—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ —Ç–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏(–ø—Ä–æ–±–µ–ª —Ç–æ–∂–µ —Å–∏–º–≤–æ–ª). </b>")
						return
				if len(lst) > 3:
					await utils.answer(message, f"<b>–ë—ã–ª–æ –≤–≤–µ–¥–µ–Ω–æ –±–æ–ª–µ–µ 3 —ç–º–æ–¥–∑–∏.</b>")
					return
				elif not emoji_rp or not emoji_rp.strip():
					await utils.answer(message, f"<b>–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è —ç–º–æ–¥–∑–∏ –µ—Å—Ç—å, –∞ –∏—Ö –Ω–µ—Ç? —Ö–º.</b>")
					return
				
		
			key_len = [len(x) for x in key_rp.split()]
		
			if len(dict_rp) >= 70:
				await utils.answer(message, '<b>–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ä–ø –∫–æ–º–∞–Ω–¥.</b>')
			elif not key_rp or not key_rp.strip():
				await utils.answer(message, '<b>–í—ã –Ω–µ –≤–≤–µ–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–ø –∫–æ–º–∞–Ω–¥—ã.</b>')
			elif not value_rp or not value_rp.strip():
				await utils.answer(message, '<b>–í—ã –Ω–µ –≤–≤–µ–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ä–ø –∫–æ–º–∞–Ω–¥—ã.</b>')
			elif int(len(key_len)) > 1:
				await utils.answer(message, '<b>–í –∫–∞—á–µ—Å—Ç–≤–µ —Ä–ø –∫–æ–º–∞–Ω–¥—ã –±—ã–ª–æ –≤–≤–µ–¥–µ–Ω–æ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞.</b>')
			elif key_rp == 'all':
				await utils.answer(message, '<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å \'<code>all</code>\' –≤ –∫–∞—á–µ—Å—Ç–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø—Ä–µ—â–µ–Ω–æ!</b>')
			elif count_emoji == 1:
				dict_emoji_rp[key_rp] = emoji_rp
				dict_rp[key_rp]= value_rp
				self.db.set('RPMod', 'rpcomands', dict_rp)
				self.db.set('RPMod', 'rpemoji', dict_emoji_rp)
				await utils.answer(message, f'<b>–ö–æ–º–∞–Ω–¥–∞ \'<code>{key_rp}</code>\' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å —ç–º–æ–¥–∑–∏ \'{emoji_rp}\'!</b>')
			else:
				 dict_rp[key_rp]= value_rp
				 self.db.set('RPMod', 'rpcomands', dict_rp)
				 await utils.answer(message, f'<b>–ö–æ–º–∞–Ω–¥–∞ \'<code>{key_rp}</code>\' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>')
		except:
			await utils.answer(message, '<b>–í—ã –Ω–µ –≤–≤–µ–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å /, –ª–∏–±–æ –≤–æ–≤—Å–µ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–≤–µ–ª–∏.</b>')

	async def delrpcmd(self, message):
		"""–ò—Å–ø–æ–ª—å–∑—É–π: .delrp (–∫–æ–º–∞–Ω–¥–∞) —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É.\n –ò—Å–ø–æ–ª—å–∑—É–π: .delrp all —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã."""
		args = utils.get_args_raw(message)
		dict_rp = self.db.get('RPMod', 'rpcomands')
		dict_emoji_rp = self.db.get('RPMod', 'rpemoji')
		key_rp = str(args)
		count = 0
		if key_rp == 'all':
			dict_rp.clear()
			dict_emoji_rp.clear()
			self.db.set('RPMod', 'rpcomands', dict_rp)
			self.db.set('RPMod', 'rpemoji', dict_emoji_rp)
			await utils.answer(message, '<b>–°–ø–∏—Å–æ–∫ —Ä–ø –∫–æ–º–∞–Ω–¥ –æ—á–∏—â–µ–Ω.</b>')
			return
		elif not key_rp or not key_rp.strip():
			await utils.answer(message, '<b>–í—ã –Ω–µ –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É.</b>')
		else:
			try:
				if key_rp in dict_emoji_rp:
					dict_rp.pop(key_rp)
					dict_emoji_rp.pop(key_rp)
					self.db.set('RPMod', 'rpcomands', dict_rp)
					self.db.set('RPMod', 'rpemoji', dict_emoji_rp)
				else:
					dict_rp.pop(key_rp)
					self.db.set('RPMod', 'rpcomands', dict_rp)
				await utils.answer(message, f'<b>–ö–æ–º–∞–Ω–¥–∞ \'<code>{key_rp}</code>\' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!</b>')
			except KeyError:
				await utils.answer(message, '<b>–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.</b>')

	async def rpmodcmd(self, message):
		"""–ò—Å–ø–æ–ª—å–∑—É–π: .rpmod —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å RP —Ä–µ–∂–∏–º.\n–ò—Å–ø–æ–ª—å–∑—É–π: .rpmod toggle —á—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–º—Å."""
		status = self.db.get("RPMod", "status")
		rezjim = self.db.get("RPMod", "rprezjim")
		args = utils.get_args_raw(message)
		if not args:
			if status == 1:
				self.db.set("RPMod", "status", 2)
				await utils.answer(message, "<b>RP –†–µ–∂–∏–º <code>–≤—ã–∫–ª—é—á–µ–Ω</code></b>")
			else:
				self.db.set("RPMod", "status", 1)
				await utils.answer(message, "<b>RP –†–µ–∂–∏–º <code>–≤–∫–ª—é—á–µ–Ω</code></b>")
		elif args.strip() == 'toggle':
			if rezjim == 1:
				self.db.set("RPMod", "rprezjim", 2)
				await utils.answer(message, "<b>RP –†–µ–∂–∏–º –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ <code>–æ—Ç–ø—Ä–∞–≤–∫—É —Å–º—Å.</code></b>")
			else:
				self.db.set("RPMod", "rprezjim", 1)
				await utils.answer(message, "<b>RP –†–µ–∂–∏–º –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ <code>–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–º—Å.</code></b>")
		else:  	
			await utils.answer(message, '–ß—Ç–æ —Ç–æ –Ω–µ —Ç–∞–∫.. ')

	async def rplistcmd(self, message):
		"""–ò—Å–ø–æ–ª—å–∑—É–π: .rplist —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–ø –∫–æ–º–∞–Ω–¥."""
		com = self.db.get('RPMod', 'rpcomands')
		emojies = self.db.get('RPMod', 'rpemoji')
		l = len(com)
		
		listComands = f'–£ –≤–∞—Å —Ä–ø –∫–æ–º–∞–Ω–¥: <b>{l}</b> –∏–∑ <b>70</b>. '
		if len(com) == 0:
			await utils.answer(message, '<b>–£–≤—ã, —É –≤–∞—Å –Ω–µ—Ç—É —Ä–ø –∫–æ–º–∞–Ω–¥. :(</b>')
			return
		for i in com:
			if i in emojies.keys():
				listComands+=f'\n‚Ä¢ <b><code>{i}</code> - {com[i]} |</b> {emojies[i]}'
			else:
				listComands+=f'\n‚Ä¢ <b><code>{i}</code> - {com[i]}</b>'
		await utils.answer(message, listComands)

	async def rpnickcmd(self, message):
		"""–ò—Å–ø–æ–ª—å–∑—É–π: .rpnick (–Ω–∏–∫) —á—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –Ω–∏–∫. –ï—Å–ª–∏ –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, —Ç–æ –≤–µ—Ä–Ω—ë—Ç—Å—è –Ω–∏–∫ –∏–∑ —Ç–≥."""
		r = utils.get_args_raw(message).strip()
		nicks = self.db.get('RPMod', 'rpnicks')
		me = await message.client.get_entity(message.sender_id)
		if not r:
			nicks[str(me.id)] = me.first_name
			self.db.set('RPMod', 'rpnicks', nicks)
			await utils.answer(message, f"<b>–ù–∏–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {me.first_name}</b>")
			return
		lst = []
		nick = ''
		for x in r:
			if x in emoji.UNICODE_EMOJI['en'].keys(): lst.append(x)
			if x not in emoji.UNICODE_EMOJI['en'].keys(): nick+=x
		if len(lst) > 3:
			await utils.answer(message, f"<b>–ù–∏–∫ '{r}' —Å–æ–¥–µ—Ä–∂–∏—Ç –±–æ–ª–µ–µ —Ç—Ä—ë—Ö —ç–º–æ–¥–∑–∏.</b>")
		elif len(lst) + len(nick) >= 45:
			await utils.answer(message, f"<b>–ù–∏–∫ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç –≤ 45 —Å–∏–º–≤–æ–ª–æ–≤(–≤–æ–∑–º–æ–∂–Ω–æ —ç–º–æ–¥–∑–∏ –∏–º–µ—é—Ç –¥–ª–∏–Ω—É –±–æ–ª–µ–µ 1 —Å–∏–º–≤–æ–ª–∞).</b>")
		else:
			nicks[str(me.id)] = r
			self.db.set('RPMod', 'rpnicks', nicks)
			await utils.answer(message, f"<b>–ù–∏–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {r}</b>")

	async def rpbackcmd(self, message):
		"""–ë–µ–∫–∞–ø —Ä–ø –∫–æ–º–∞–Ω–¥.\n .rpback –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. """
		args = utils.get_args_raw(message).strip()
		comands = self.db.get('RPMod', 'rpcomands')
		emojies = self.db.get('RPMod', 'rpemoji')
		file_name = 'RPModBackUp.pickle'
		id = message.to_id
		reply = await message.get_reply_message()
		if not args:
			await utils.answer(message, '<b>–ê—Ä–≥—É–º–µ–Ω—Ç—ã:</b>\n<code>-b</code> <b>-- —Å–¥–µ–ª–∞—Ç—å –±–µ–∫–∞–ø.</b>\n<code>-r</code> <b>–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–µ–∫–∞–ø.(–∏—Å–ø–æ–ª—å–∑—É–π —Å —Ä–µ–ø–ª–∞–µ–º –Ω–∞ —Ñ–∞–π–ª)</b>')
		if args == '-b':
			try:
				await message.delete()
				dict_all = { 'rp': comands, 'emj': emojies}
				with open(file_name, 'wb') as f:
					pickle.dump(dict_all, f)
				await message.client.send_file(id, file_name)
			except Exception as e:
				await utils.answer(message, f"<b>–û—à–∏–±–∫–∞:\n</b>{e}")
		elif args == '-r' and reply:
			try:
				if not reply.document:
					await utils.answer(message, f"<b>–≠—Ç–æ –Ω–µ —Ñ–∞–π–ª.</b>")
				await reply.download_media(file_name)
				with open(file_name, 'rb') as f:
					data = pickle.load(f)
				rp = data['rp']
				emj = data['emj']
				result_rp = dict(comands, **rp)
				result_emj = dict(emojies, **emj)
				self.db.set('RPMod', 'rpcomands', result_rp)
				self.db.set('RPMod', 'rpemoji', result_emj)
				await utils.answer(message, f"<b>–ö–æ–º–∞–Ω–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>")
			except Exception as e:
				await utils.answer(message, f"<b>–û—à–∏–±–∫–∞:\n</b>{e}")
			
	async def rpblockcmd(self, message):
		"""–ò—Å–ø–æ–ª—å–∑—É–π: .rpblock —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ(–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –Ω—É–∂–Ω–æ–º —á–∞—Ç–µ).\n–ò—Å–ø–æ–ª—å–∑—É–π: .rpblock list —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á–∞—Ç—ã –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è—Ö.\n–ò—Å–ø–æ–ª—å–∑—É–π .rpblock (–∏–¥) —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —á–∞—Ç –∏–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π."""
		args = utils.get_args_raw(message)
		ex = self.db.get("RPMod", "exlist")
		if not args:
			a = await message.client.get_entity(message.to_id)
			if a.id in ex:
				ex.remove(a.id)
				self.db.set("RPMod", "exlist", ex)
				try:
					name = a.title
				except:
					name = a.first_name
				await utils.answer(message, f'<i>–ß–∞—Ç <b><u>{name}</u></b>[<code>{a.id}</code>] —É–¥–∞–ª–µ–Ω –∏–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π.</i>')
			else:
				ex.append(a.id)
				self.db.set("RPMod", "exlist", ex)
				try:
					name = a.title
				except:
					name = a.first_name
				await utils.answer(message, f'<i>–ß–∞—Ç <b><u>{name}</u></b>[<code>{a.id}</code>] –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è.</i>')
		elif args.isdigit():
			args = int(args)
			if args in ex:
				ex.remove(args)
				self.db.set("RPMod", "exlist", ex)
				a = await message.client.get_entity(args)
				try:
					name = a.title
				except:
					name = a.first_name
				await utils.answer(message, f'<i>–ß–∞—Ç <b><u>{name}</u></b>(<code>{args}</code>) —É–¥–∞–ª–µ–Ω –∏–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π.</i>')
			else:
				try:
					a = await message.client.get_entity(args)
				except:
					await utils.answer(message, '<b>–ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥.</b>')
				ex.append(args)
				self.db.set("RPMod", "exlist", ex)
				try:
					name = a.title
				except:
					name = a.first_name
				await utils.answer(message, f'<i>–ß–∞—Ç <b><u>{name}</u></b>[<code>{a.id}</code>] –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è.</i>')
		elif args == 'list':
			ex_len = len(ex)
			if ex_len == 0:
				await utils.answer(message, f'<b>–°–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –ø—É—Å—Ç.</b>')
				return
			sms = f'<i> –ß–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è—Ö({ex_len}):</i>'
			for i in ex:
				try:
					a = await message.client.get_entity(i)
				except:
					await utils.answer(message, f'<b>–ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥ -- {a}</b>')
					return
				try:
					name = a.title
				except:
					name = a.first_name
				sms+=f'\n‚Ä¢ <b><u>{name}</u> --- </b><code>{i}</code>'
			await utils.answer(message, sms)
		else:
			await utils.answer(message, '–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫..')

	async def useracceptcmd(self, message):
		""" –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞—à–∏ –∫–æ–º–∞–Ω–¥—ã.\n .useraccept {id/reply} """
		reply = await message.get_reply_message()
		args = utils.get_args_raw(message)
		userA = self.db.get('RPMod', 'useraccept')
		if not reply and not args:
			await utils.answer(message, '–ù–µ—Ç –Ω–∏ —Ä–µ–ø–ª–∞—è, –Ω–∏ –∞—Ä–≥—Ä—É–º–µ–Ω—Ç–æ–≤.')
		elif args == '-l':
			sms = '<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–∞–Ω–¥–∞–º:</b>'
			for i in userA:
				try:
					user = await message.client.get_entity(int(i))
					sms+= f'\n<b>‚Ä¢ <u>{user.first_name}</u> ---</b> <code>{i}</code>'
				except:
					sms+= f'\n<b>‚Ä¢</b> <code>{i}</code>'
			await utils.answer(message, sms)
		elif args or reply:
			args = int(args) if args.isdigit() else reply.sender_id
			if args in userA:
				userA.remove(args)
				self.db.set('RPMod', 'useraccept', userA)
				await utils.answer(message, f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{args}</code> –±—ã–ª –∑–∞–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø.</b>')
			else:
				userA.append(args)
				self.db.set('RPMod', 'useraccept', userA)
				await utils.answer(message, f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{args}</code> –±—ã–ª –æ—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø.</b>')
		else:
			await utils.answer(message, '–ß—Ç–æ —Ç–æ –Ω–µ —Ç–∞–∫..')

	async def watcher(self, message):
		try:
			status = self.db.get("RPMod", "status")
			comand = self.db.get('RPMod', 'rpcomands')
			rezjim = self.db.get('RPMod', 'rprezjim')
			emojies = self.db.get('RPMod', 'rpemoji')
			ex = self.db.get("RPMod", "exlist")
			nicks = self.db.get('RPMod', 'rpnicks')
			users_accept = self.db.get('RPMod', 'useraccept')

			me = (await message.client.get_entity(message.sender_id))
			me_id = (await message.client.get_me()).id
			if str(me.id) in nicks.keys():
				nick = nicks[str(me.id)]
			else:
				nick = me.first_name
			args = message.text.lower()
			
			chat_rp = await message.client.get_entity(message.to_id)
			lines = args.splitlines()
			detail = []
			tags = lines[0].split(' ')
			round = 1
			if not tags[-1].startswith('@'):
				reply = await message.get_reply_message()
				user = await message.client.get_entity(reply.sender_id)
			else:
				if tags[0] in comand:
					if message.sender_id == me_id or message.sender_id in users_accept:
						if not tags[-1][1:].isdigit():
							user = await message.client.get_entity(tags[-1])
						else:
							user = await message.client.get_entity(int(tags[-1][1:]))
						lines[0] = lines[0].rsplit(' ', 1)[0]
			for i in lines[0].split(' ',maxsplit=1):
				if round == 1:
					detail.append(i)
				else:
					detail.append(' '+i)
				round+=1
			if len(detail) < 2:
				detail.append(' ')
			user.first_name = nicks[str(user.id)] if str(user.id) in nicks else user.first_name
			
			if status == 1 and chat_rp.id not in ex:
				if message.sender_id in users_accept or message.sender_id == me_id:
					for i in comand:
						if detail[0] == i:
							if detail[0] in emojies.keys():
								if len(lines) < 2:
									if rezjim == 1:
										await utils.answer(message, f"{emojies[detail[0]]} | <a href=tg://user?id={me.id}>{nick}</a> {comand[detail[0]]} <a href=tg://user?id={user.id}>{user.first_name}</a>"+detail[1])
									else:
										await message.respond(f"{emojies[detail[0]]} | <a href=tg://user?id={me.id}>{nick}</a> {comand[detail[0]]} <a href=tg://user?id={user.id}>{user.first_name}</a>"+detail[1])
								else:
									if rezjim == 1:
										await utils.answer(message, f"{emojies[detail[0]]} | <a href=tg://user?id={me.id}>{nick}</a> {comand[detail[0]]} <a href=tg://user?id={user.id}>{user.first_name}</a>"+detail[1]+f"\n<b>–° —Ä–µ–ø–ª–∏–∫–æ–π: </b>{lines[1]}")
									else:
										await message.respond(f"{emojies[detail[0]]} | <a href=tg://user?id={me.id}>{nick}</a> {comand[detail[0]]} <a href=tg://user?id={user.id}>{user.first_name}</a>"+detail[1]+f"\n<b>–° —Ä–µ–ø–ª–∏–∫–æ–π: </b>{lines[1]}")
							else:
								if len(lines) < 2:
									if rezjim == 1:
										await utils.answer(message, f"<a href=tg://user?id={me.id}>{nick}</a> {comand[detail[0]]} <a href=tg://user?id={user.id}>{user.first_name}</a>"+detail[1])
									else:
										await message.respond(f"<a href=tg://user?id={me.id}>{nick}</a> {comand[detail[0]]} <a href=tg://user?id={user.id}>{user.first_name}</a>"+detail[1])
								else:
									if rezjim == 1:
										await utils.answer(message, f"<a href=tg://user?id={me.id}>{nick}</a> {comand[detail[0]]} <a href=tg://user?id={user.id}>{user.first_name}</a>"+detail[1]+f"\n<b>–° —Ä–µ–ø–ª–∏–∫–æ–π: </b>{lines[1]}")
									else:
										await message.respond(f"<a href=tg://user?id={me.id}>{nick}</a> {comand[detail[0]]} <a href=tg://user?id={user.id}>{user.first_name}</a>"+detail[1]+f"\n<b>–° —Ä–µ–ø–ª–∏–∫–æ–π: </b>{lines[1]}")
		except Exception as e:
			await message.respond( e)